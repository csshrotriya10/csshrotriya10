class Node {
 public:
      int data;
      Node *next;
      Node() : data(0), next(nullptr) {}
      Node(int x) : data(x), next(nullptr) {}
      Node(int x, Node *next) : data(x), next(next) {}
  };
Node *removesHead(Node *head) 
{
 Node *temp = head;
 if(head == NULL) return head;
 head= head->next;
 free(temp); //in C++ we don't have garbage collector but in Java we do have so this line need not be used
 return head;
}

Node *deleteLast(Node *head){
    if(head == NULL || head->next == NULL) return head;

    Node *temp = head;
    while (temp->next->next != NULL) {
       temp = temp->next;
    }
    delete(temp->next);
    temp->next = nullptr;
    return head;
}

Node *removeKposition(Node *head, int k)
{ 
  if(head == NULL ) return head;
  if(k == 1)
  { 
    Node *temp = head;
    head= head->next;
    free(temp); 
    return head;
  }
  Node *temp = head;
  Node *prev = NULL;
  int count = 0;
  while(temp != NULL)
 {
   count++;
   if(count == k){
         prev->next = prev->next->next;
         free(temp);
         break;
   }
   prev = temp;
   temp = temp->next;
 }
return head;
}
